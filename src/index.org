#+SETUPFILE: "setup.org"
#+TITLE: thi.ng/sema

* About the project

** TODO Overview

Lightweight Linked Data tools

** TODO Status
** TODO Example usage

#+BEGIN_SRC clojure
  (require 'thi.ng.ldk.core.api)

  ;; TODO some magic
#+END_SRC

** License

This project is open source and licensed under the [[http://www.apache.org/licenses/LICENSE-2.0][Apache Software License 2.0]].

** Injected properties                                             :noexport:

#+BEGIN_SRC clojure :exports none :noweb-ref version
0.2.0-SNAPSHOT
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref project-url
https://github.com/thi-ng/sema
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-source-path
target/classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb-ref gen-test-path
target/test-classes
#+END_SRC
#+BEGIN_SRC clojure :exports none :noweb yes :noweb-ref cljs-artefact-path
target/sema-<<version>>.js
#+END_SRC

** Dependencies
*** Runtime
**** [[https://github.com/clojure/clojure][Clojure]]
#+BEGIN_SRC clojure :noweb-ref dep-clj
[org.clojure/clojure "1.6.0"]
#+END_SRC
**** [[https://github.com/clojure/clojurescript][ClojureScript]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs
[org.clojure/clojurescript "0.0-2197"]
#+END_SRC
**** [[https://github.com/clojure/data.csv][clojure.data.csv]]
#+BEGIN_SRC clojure :noweb-ref dep-csv
[org.clojure/data.csv "0.1.2"]
#+END_SRC
**** [[https://github.com/clojure/data.json][clojure.data.json]]
#+BEGIN_SRC clojure :noweb-ref dep-json
[org.clojure/data.json "0.2.2"]
#+END_SRC
**** [[https://github.com/seancorfield/clj-time][clj-time]]
#+BEGIN_SRC clojure :noweb-ref dep-time
[clj-time "0.5.0"]
#+END_SRC
**** [[https://github.com/stuartsierra/dependency][com.stuartsierra/dependency]]
#+BEGIN_SRC clojure :noweb-ref dep-depgraph
[com.stuartsierra/dependency "0.1.0"]
#+END_SRC
**** [[https://github.com/thi-ng/common/][thi.ng/common]]
#+BEGIN_SRC clojure :noweb-ref dep-common
[thi.ng/common "0.1.2"]
#+END_SRC
*** Development
**** [[https://github.com/cemerick/austin][Austin]]
#+BEGIN_SRC clojure :noweb-ref dep-austin
[com.cemerick/austin "0.1.4"]
#+END_SRC
**** [[https://github.com/lynaghk/cljx][Cljx]]
#+BEGIN_SRC clojure :noweb-ref dep-cljx
[com.keminglabs/cljx "0.3.2"]
#+END_SRC
**** [[https://github.com/hugoduncan/criterium][Criterium]]
#+BEGIN_SRC clojure :noweb-ref dep-criterium
[criterium "0.4.1"]
#+END_SRC
**** [[https://github.com/cemerick/clojurescript.test][clojurescript.test]]
#+BEGIN_SRC clojure :noweb-ref dep-cljs-test
[com.cemerick/clojurescript.test "0.2.2"]
#+END_SRC
**** [[https://github.com/emezeske/lein-cljsbuild][Cljsbuild]]
#+BEGIN_SRC clojure :noweb-ref dep-cljsbuild
[lein-cljsbuild "1.0.2"]
#+END_SRC

** Contributors

| *Name*     | *Role*                          | *Website*      |
|------------+---------------------------------+----------------|
| [[k@thi.ng][Karsten Schmidt]] | initiator & principal developer | http://postspectacular.com |

** Release history

| *Version* | *Released* | *Description*      | *Lein coordinates*     | *Tagged Github URL* |
|-----------+------------+--------------------+------------------------+---------------------|
|     0.1.0 | pending    | 1st public release | =[thi.ng/sema "0.1.0"]= |                     |

** Leiningen coordinates

#+BEGIN_SRC clojure :noweb yes :noweb-ref lein-coords
  [thi.ng/sema <<version>>]
#+END_SRC

** Building this project

This project is written in a literate programming format and requires
[[https://www.gnu.org/software/emacs/][Emacs]] & [[http://orgmode.org][Org-mode]] to generate usable source code in [[https://github.com/lynaghk/cljx][CLJX]] form. Assuming
both tools are installed, the easiest way to generate a working
project is via command line (make sure =emacs= is on your path or else
edit its path in =tangle.sh=):

#+BEGIN_SRC bash
  git clone https://github.com/thi-ng/sema.git
  cd sema
  ./tangle.sh src/*.org test/*.org
#+END_SRC

Tangling is the process of extracting & combining source blocks from
=.org= files into an actual working project/source tree. Once tangling
is complete, you can =cd= into the generated project directory
(=babel=) and then use =lein= as usual.

*** Testing

The =project.clj= file defines an alias to trigger a complete build &
tests for both CLJ & CLJS versions.

#+BEGIN_SRC bash
  cd babel
  lein cleantest
#+END_SRC

To build the Clojurescript version simply run =lein cljsbuild test=
from the same directory. A small HTML harness for the resulting JS
file is also located in that folder (=babel/index.html=), allowing for
further experimentation in the browser.

*** Working with the REPL

Since the generated =project.clj= (see below) includes REPL hooks for
CLJX, editing files in Org-mode, then re-loading & testing changes is
quite trivial. Simply launch a REPL (via =lein= or Emacs) as usual.
Everytime you've made changes to an =.org= file, re-tangle it from
Emacs (=C-c C-v t=) or =tangle.sh=, then reload the namespace in the
REPL via =(require 'thi.ng.ldk... :reload)= or similar.

** Leiningen project file                                          :noexport:

#+BEGIN_SRC clojure :tangle ../babel/project.clj :noweb yes :mkdirp yes :padline no
  (defproject thi.ng/sema "<<version>>"
    :description "Lightweight Linked Data tools"
    :url "<<project-url>>"
    :license {:name "Apache Software License 2.0"
              :url "http://www.apache.org/licenses/LICENSE-2.0"}
    :dependencies [<<dep-clj>>
                   <<dep-csv>>
                   <<dep-json>>
                   <<dep-time>>
                   <<dep-depgraph>>
                   <<dep-common>>]

    :source-paths ["src/cljx"]
    :test-paths ["<<gen-test-path>>"]

    :profiles {:dev {:dependencies [<<dep-cljs>>
                                    <<dep-criterium>>]
                     :plugins [<<dep-cljx>>
                               <<dep-cljsbuild>>
                               <<dep-cljs-test>>
                               <<dep-austin>>]
                     :hooks [cljx.hooks]
                     :aliases {"cleantest" ["do" "clean," "test," "cljsbuild" "test"]}}}

    :cljx {:builds [{:source-paths ["src/cljx"]
                     :output-path "<<gen-source-path>>"
                     :rules :clj}
                    {:source-paths ["src/cljx"]
                     :output-path "<<gen-source-path>>"
                     :rules :cljs}
                    {:source-paths ["test/cljx"]
                     :output-path "<<gen-test-path>>"
                     :rules :clj}
                    {:source-paths ["test/cljx"]
                     :output-path "<<gen-test-path>>"
                     :rules :cljs}]}

    :cljsbuild {:builds [{:source-paths ["<<gen-source-path>>" "<<gen-test-path>>"]
                          :id "simple"
                          :compiler {:output-to "<<cljs-artefact-path>>"
                                     :optimizations :whitespace
                                     :pretty-print true}}]
                :test-commands {"unit-tests" ["phantomjs" :runner "<<cljs-artefact-path>>"]}}

    :pom-addition [:developers [:developer
                                [:name "Karsten Schmidt"]
                                [:url "http://postspectacular.com"]
                                [:timezone "0"]]])
#+END_SRC

** ClojureScript HTML harness                                      :noexport:

#+BEGIN_SRC html :tangle ../babel/index.html :noweb yes :mkdirp yes :padline no
  <!DOCTYPE html5>
  <html lang="en">
    <head>
      <title><<lein-coords>> test</title>
    </head>
    <body>
      <script type="text/javascript" src="<<cljs-artefact-path>>"></script>
    </body>
  </html>
#+END_SRC
** Accessing library version during runtime

The autogenerated namespace =thi.ng.ldk.version= contains a single
symbol =version= holding the version string defined above:

#+BEGIN_SRC clojure :noweb yes
  (use '[thi.ng.ldk.version])
  
  (prn version)
  ; "<<version>>"
#+END_SRC

*** Version namespace                                              :noexport:

#+BEGIN_SRC clojure :tangle ../babel/src/cljx/thi/ng/ldk/version.cljx :noweb yes :mkdirp yes :padline no :exports none
  (ns thi.ng.ldk.version)

  (def ^:const version "<<version>>")
#+END_SRC

* Modules

*** Note for Github users

The following sections contain links to project modules, but are not
visibile when reading this file on Github. Please navigate to the
source files via the normal [[https://github.com/thi-ng/ldk/tree/master/][GH repo browser]].

** Core API

#+INCLUDE: "core.org" :minlevel 2
#+INCLUDE: "mapper.org" :minlevel 2

** Storage
#+INCLUDE: "store.org" :minlevel 2

** Query engine
#+INCLUDE: "query_core.org" :minlevel 2
#+INCLUDE: "query_executor.org" :minlevel 2
#+INCLUDE: "query_expressions.org" :minlevel 2
#+INCLUDE: "query_io.org" :minlevel 2

** Inference
#+INCLUDE: "inference.org" :minlevel 2

** RDF IO
#+INCLUDE: "io.org" :minlevel 2

** Utilities
#+INCLUDE: "common.org" :minlevel 2


* Tests

#+INCLUDE: "../test/core.org" :minlevel 2
